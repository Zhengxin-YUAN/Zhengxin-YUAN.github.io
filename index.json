[{"categories":["Learning"],"content":"Python基础部分的自学笔记","date":"2022-03-25","objectID":"/learning-python-basic-part2/","tags":["Python","学习笔记"],"title":"Python-Basic-Part2","uri":"/learning-python-basic-part2/"},{"categories":["Learning"],"content":"用户输入 ","date":"2022-03-25","objectID":"/learning-python-basic-part2/:1:0","tags":["Python","学习笔记"],"title":"Python-Basic-Part2","uri":"/learning-python-basic-part2/"},{"categories":["Learning"],"content":"用户输入是什么 函数input()让程序暂停运行，等待用户输入一些文本。获取用户输入后，Python将其存储在一个变量中，以方便你使用。 message = input(\"Tell me something, and I will repeat it back to you: \") print(message) 得到 Tell me something, and I will repeat it back to you: Hello everyone! Hello everyone! 注意: Sublime Text不能运行提示用户输入的程序。你可以使用Sublime Text来编写提示用户输入的程序，但必须从终端运行它们。 可将提示存储在一个变量中，再将该变量传递给函数input()。 prompt = \"If you tell us who you are, we can personalize the messages you see.\" prompt += \"\\nWhat is your first name? \" name = input(prompt) print(\"\\nHello, \" + name + \"!\") ","date":"2022-03-25","objectID":"/learning-python-basic-part2/:1:1","tags":["Python","学习笔记"],"title":"Python-Basic-Part2","uri":"/learning-python-basic-part2/"},{"categories":["Learning"],"content":"获取数值输入 使用函数int()实现 height = input(\"How tall are you, in inches? \") height = int(height) if height \u003e= 36: print(\"\\nYou're tall enough to ride!\") else: print(\"\\nYou'll be able to ride when you're a little older.\") ","date":"2022-03-25","objectID":"/learning-python-basic-part2/:1:2","tags":["Python","学习笔记"],"title":"Python-Basic-Part2","uri":"/learning-python-basic-part2/"},{"categories":["Learning"],"content":"求模运算符 处理数值信息时，求模运算符（%）是一个很有用的工具，它将两个数相除并返回余数： \u003e\u003e\u003e 4 % 3 1 \u003e\u003e\u003e 5 % 3 2 \u003e\u003e\u003e 6 % 3 0 \u003e\u003e\u003e 7 % 3 1 ","date":"2022-03-25","objectID":"/learning-python-basic-part2/:1:3","tags":["Python","学习笔记"],"title":"Python-Basic-Part2","uri":"/learning-python-basic-part2/"},{"categories":["Learning"],"content":"while 循环 ","date":"2022-03-25","objectID":"/learning-python-basic-part2/:2:0","tags":["Python","学习笔记"],"title":"Python-Basic-Part2","uri":"/learning-python-basic-part2/"},{"categories":["Learning"],"content":"while 循环是什么 for循环用于针对集合中的每个元素都一个代码块，而while循环不断地运行，直到指定的条件不满足为止。 ","date":"2022-03-25","objectID":"/learning-python-basic-part2/:2:1","tags":["Python","学习笔记"],"title":"Python-Basic-Part2","uri":"/learning-python-basic-part2/"},{"categories":["Learning"],"content":"while 循环怎么用 你可以使用while循环来数数，例如，下面的while循环从1数到5： current_number = 1 while current_number \u003c= 5: print(current_number) current_number += 1 #1 #2 #3 #4 #5 ","date":"2022-03-25","objectID":"/learning-python-basic-part2/:2:2","tags":["Python","学习笔记"],"title":"Python-Basic-Part2","uri":"/learning-python-basic-part2/"},{"categories":["Learning"],"content":"让用户选择何时退出 可使用while循环让程序在用户愿意时不断地运行，如下面的程序 prompt = \"\\nTell me something, and I will repeat it back to you:\" prompt += \"\\nEnter 'quit' to end the program. \" message = \"\" while message != 'quit': message = input(prompt) if message != 'quit': print(message) #Tell me something, and I will repeat it back to you: #Enter 'quit' to end the program. Hello everyone! #Hello everyone! #Tell me something, and I will repeat it back to you: #Enter 'quit' to end the program. Hello again. #Hello again. #Tell me something, and I will repeat it back to you: #Enter 'quit' to end the program. quit 使用标志 可定义一个变量，用于判断整个程序是否处于活动状态，这个变量被称为标志。 prompt = \"\\nTell me something, and I will repeat it back to you:\" prompt += \"\\nEnter 'quit' to end the program. \" active = True while active: message = input(prompt) if message == 'quit': active = False else: print(message) 使用 break 退出循环 要立即退出while循环，不再运行循环中余下的代码，也不管条件测试的结果如何，可使用break语句。 prompt = \"\\nPlease enter the name of a city you have visited:\" prompt += \"\\n(Enter 'quit' when you are finished.) \" while True: city = input(prompt) if city == 'quit': break else: print(\"I'd love to go to \" + city.title() + \"!\") #Please enter the name of a city you have visited: #(Enter 'quit' when you are finished.) New York #I'd love to go to New York! #Please enter the name of a city you have visited: #(Enter 'quit' when you are finished.) San Francisco #I'd love to go to San Francisco! #Please enter the name of a city you have visited: #(Enter 'quit' when you are finished.) quit 注意: 在任何Python循环中都可使用break语句。例如，可使用break语句来退出遍历列表或字典的for循环。 ","date":"2022-03-25","objectID":"/learning-python-basic-part2/:2:3","tags":["Python","学习笔记"],"title":"Python-Basic-Part2","uri":"/learning-python-basic-part2/"},{"categories":["Learning"],"content":"在循环中使用 continue 要返回到循环开头，并根据条件测试结果决定是否继续执行循环，可使用continue语句，它不像break语句那样不再执行余下的代码并退出整个循环。 current_number = 0 while current_number \u003c 10: current_number += 1 if current_number % 2 == 0: continue print(current_number) #1 #3 #5 #7 #9 如果结果为0（意味着current_number可被2整除），就执行continue语句， 让Python忽略余下的代码，并返回到循环的开头。 ","date":"2022-03-25","objectID":"/learning-python-basic-part2/:2:4","tags":["Python","学习笔记"],"title":"Python-Basic-Part2","uri":"/learning-python-basic-part2/"},{"categories":["Learning"],"content":"避免无限循环 每个while循环都必须有停止运行的途径，这样才不会没完没了地执行下去。 如果程序陷入无限循环，可按Ctrl + C，也可关闭显示程序输出的终端窗口。 注意: 有些编辑器（如Sublime Text）内嵌了输出窗口，这可能导致难以结束无限循环，因此不 得不关闭编辑器来结束无限循环。 ","date":"2022-03-25","objectID":"/learning-python-basic-part2/:2:5","tags":["Python","学习笔记"],"title":"Python-Basic-Part2","uri":"/learning-python-basic-part2/"},{"categories":["Learning"],"content":"使用 while 循环来处理列表和字典 到目前为止，我们每次都只处理了一项用户信息：获取用户的输入，再将输入打印出来或作出应答；循环再次运行时，我们获悉另一个输入值并作出响应。然而，要记录大量的用户和信息，需要在while循环中使用列表和字典。 在列表之间移动元素 使用一个while循环，在验证用户的同时将其从未验证用户列表中提取出来，再将其加入到另一个已验证用户列表中。代码可能类似于下面这样： unconfirmed_users = ['alice', 'brian', 'candace'] confirmed_users = [] while unconfirmed_users: current_user = unconfirmed_users.pop() print(\"Verifying user: \" + current_user.title()) confirmed_users.append(current_user) print(\"\\nThe following users have been confirmed:\") for confirmed_user in confirmed_users: print(confirmed_user.title()) #Verifying user: Candace #Verifying user: Brian #Verifying user: Alice #The following users have been confirmed: #Candace #Brian #Alice 删除包含特定值的所有列表元素 假设你有一个宠物列表，其中包含多个值为’cat’的元素。要删除所有这些元素，可不断运行一个while循环，直到列表中不再包含值’cat'，如下所示： pets = ['dog', 'cat', 'dog', 'goldfish', 'cat', 'rabbit', 'cat'] print(pets) while 'cat' in pets: pets.remove('cat') print(pets) #['dog', 'cat', 'dog', 'goldfish', 'cat', 'rabbit', 'cat'] #['dog', 'dog', 'goldfish', 'rabbit'] 使用用户输入来填充字典 可使用while循环提示用户输入任意数量的信息。 responses = {} polling_active = True while polling_active: name = input(\"\\nWhat is your name? \") response = input(\"Which mountain would you like to climb someday? \") responses[name] = response repeat = input(\"Would you like to let another person respond? (yes/ no) \") if repeat == 'no': polling_active = False print(\"\\n--- Poll Results ---\") for name, response in responses.items(): print(name + \" would like to climb \" + response + \".\") # What is your name? Eric # Which mountain would you like to climb someday? Denali # Would you like to let another person respond? (yes/ no) yes # What is your name? Lynn # Which mountain would you like to climb someday? Devil's Thumb # Would you like to let another person respond? (yes/ no) no # --- Poll Results --- # Lynn would like to climb Devil's Thumb. # Eric would like to climb Denali. ","date":"2022-03-25","objectID":"/learning-python-basic-part2/:2:6","tags":["Python","学习笔记"],"title":"Python-Basic-Part2","uri":"/learning-python-basic-part2/"},{"categories":["Learning"],"content":"函数 ","date":"2022-03-25","objectID":"/learning-python-basic-part2/:3:0","tags":["Python","学习笔记"],"title":"Python-Basic-Part2","uri":"/learning-python-basic-part2/"},{"categories":["Learning"],"content":"函数是什么 函数是带名字的代码块，用于完 成具体的工作。 ","date":"2022-03-25","objectID":"/learning-python-basic-part2/:3:1","tags":["Python","学习笔记"],"title":"Python-Basic-Part2","uri":"/learning-python-basic-part2/"},{"categories":["Learning"],"content":"函数怎么用 下面是一个打印问候语的简单函数，名为greet_user()： def greet_user(): print(\"Hello!\") greet_user() # Hello! 这个示例演示了最简单的函数结构。在这里，函数名为greet_user()，它不需要任何信息就能完成其工作，因此括号是空的（即便如此，括号也必不可少）。最后，定义以冒号结尾。 紧跟在def greet_user():后面的所有缩进行构成了函数体，描述了函数是做什么的。 向函数传递信息 通过在这里添加username，就可让函数接受你给username指定的任何值。 def greet_user(username): print(\"Hello, \" + username.title() + \"!\") greet_user('jesse') # Hello, Jesse! 实参和形参 在函数greet_user()的定义中，变量username是一个形参，函数完成其工作所需的一项信息。在代码greet_user('jesse')中，值'jesse'是一个实参。实参是调用函数时传递给函数的信息。我们调用函数时，将要让函数使用的信息放在括号内。在greet_user('jesse')中，将实参'jesse'传递给了函数greet_user()，这个值被存储在形参username中。 注意: 大家有时候会形参、实参不分，因此如果你看到有人将函数定义中的变量称为实参或将函数调用中的变量称为形参，不要大惊小怪。 ","date":"2022-03-25","objectID":"/learning-python-basic-part2/:3:2","tags":["Python","学习笔记"],"title":"Python-Basic-Part2","uri":"/learning-python-basic-part2/"},{"categories":["Learning"],"content":"传递实参 位置实参 你调用函数时，Python必须将函数调用中的每个实参都关联到函数定义中的一个形参。为此，最简单的关联方式是基于实参的顺序。这种关联方式被称为位置实参。 def describe_pet(animal_type, pet_name): print(\"\\nI have a \" + animal_type + \".\") print(\"My \" + animal_type + \"'s name is \" + pet_name.title() + \".\") describe_pet('hamster', 'harry') describe_pet('dog', 'willie') # I have a hamster. # My hamster's name is Harry. # I have a dog. # My dog's name is Willie. 位置实参的顺序很重要! 关键字实参 关键字实参是传递给函数的名称-值对，你直接在实参中将名称和值关联起来。 def describe_pet(animal_type, pet_name): print(\"\\nI have a \" + animal_type + \".\") print(\"My \" + animal_type + \"'s name is \" + pet_name.title() + \".\") describe_pet(animal_type='hamster', pet_name='harry') describe_pet(pet_name='harry', animal_type='hamster') 注意: 使用关键字实参时，务必准确地指定函数定义中的形参名。 默认值 例如，如果你发现调用describe_pet()时，描述的大都是小狗，就可将形参animal_type的默认值设置为'dog'。这样，调用describe_pet()来描述小狗时，就可不提供这种信息： def describe_pet(pet_name, animal_type='dog'): print(\"\\nI have a \" + animal_type + \".\") print(\"My \" + animal_type + \"'s name is \" + pet_name.title() + \".\") describe_pet(pet_name='willie') # I have a dog. # My dog's name is Willie. 注意: 使用默认值时，在形参列表中必须先列出没有默认值的形参，再列出有默认值的实参。这让Python依然能够正确地解读位置实参。 等效的函数调用 鉴于可混合使用位置实参、关键字实参和默认值，通常有多种等效的函数调用方式。 describe_pet('willie') describe_pet(pet_name='willie') describe_pet('harry', 'hamster') describe_pet(pet_name='harry', animal_type='hamster') describe_pet(animal_type='hamster', pet_name='harry') 这些函数调用的输出与前面的示例相同。 注意: 使用哪种调用方式无关紧要，只要函数调用能生成你希望的输出就行。使用对你来说最容易理解的调用方式即可。 避免实参错误 def describe_pet(animal_type, pet_name): print(\"\\nI have a \" + animal_type + \".\") print(\"My \" + animal_type + \"'s name is \" + pet_name.title() + \".\") describe_pet() Python发现该函数调用缺少必要的信息，而traceback指出了这一点： Traceback (most recent call last): File \"pets.py\", line 6, in \u003cmodule\u003e describe_pet() TypeError: describe_pet() missing 2 required positional arguments: 'animal_ type' and 'pet_name' ","date":"2022-03-25","objectID":"/learning-python-basic-part2/:3:3","tags":["Python","学习笔记"],"title":"Python-Basic-Part2","uri":"/learning-python-basic-part2/"},{"categories":["Learning"],"content":"返回值 函数并非总是直接显示输出，相反，它可以处理一些数据，并返回一个或一组值。 返回简单值 下面来看一个函数，它接受名和姓并返回整洁的姓名： def get_formatted_name(first_name, last_name): full_name = first_name + ' ' + last_name return full_name.title() musician = get_formatted_name('jimi', 'hendrix') print(musician) # Jimi Hendrix 让实参变成可选的 让中间名变成可选的，可给实参middle_name指定一个默认值，空字符串。 def get_formatted_name(first_name, last_name, middle_name=''): if middle_name: full_name = first_name + ' ' + middle_name + ' ' + last_name else: full_name = first_name + ' ' + last_name return full_name.title() musician = get_formatted_name('jimi', 'hendrix') print(musician) musician = get_formatted_name('john', 'hooker', 'lee') print(musician) # Jimi Hendrix # John Lee Hooker 可选值让函数能够处理各种不同情形的同时，确保函数调用尽可能简单。 返回字典 函数可返回任何类型的值，包括列表和字典等较复杂的数据结构。 def build_person(first_name, last_name, age=''): person = {'first': first_name, 'last': last_name} if age: person['age'] = age return person musician = build_person('jimi', 'hendrix', age=27) print(musician) 在函数定义中，我们新增了一个可选形参age，并将其默认值设置为空字符串。如果函数调用中包含这个形参的值，这个值将存储到字典中。在任何情况下，这个函数都会存储人的姓名，但可对其进行修改，使其也存储有关人的其他信息。 结合使用函数和 while 循环 下面尝试使用名和姓跟用户打招呼： def get_formatted_name(first_name, last_name): full_name = first_name + ' ' + last_name return full_name.title() while True: print(\"\\nPlease tell me your name:\") print(\"(enter 'q' at any time to quit)\") f_name = input(\"First name: \") if f_name == 'q': break l_name = input(\"Last name: \") if l_name == 'q': break formatted_name = get_formatted_name(f_name, l_name) print(\"\\nHello, \" + formatted_name + \"!\") # Please tell me your name: # (enter 'q' at any time to quit) # First name: eric # Last name: matthes # Hello, Eric Matthes! # Please tell me your name: # (enter 'q' at any time to quit) # First name: q ","date":"2022-03-25","objectID":"/learning-python-basic-part2/:3:4","tags":["Python","学习笔记"],"title":"Python-Basic-Part2","uri":"/learning-python-basic-part2/"},{"categories":["Learning"],"content":"传递列表 假设有一个用户列表，我们要问候其中的每位用户。下面的示例将一个名字列表传递给一个名为greet_users()的函数，这个函数问候列表中的每个人： def greet_users(names): for name in names: msg = \"Hello, \" + name.title() + \"!\" print(msg) usernames = ['hannah', 'ty', 'margot'] greet_users(usernames) # Hello, Hannah! # Hello, Ty! # Hello, Margot! 输出完全符合预期，每位用户都看到了一条个性化的问候语。 在函数中修改列表 8.4.1","date":"2022-03-25","objectID":"/learning-python-basic-part2/:3:5","tags":["Python","学习笔记"],"title":"Python-Basic-Part2","uri":"/learning-python-basic-part2/"},{"categories":null,"content":" 站长 姓名：Y. Z. X. 描述：个人博客，自娱自乐。本站专注学习，游戏移步Steam\u0026Bilibili，电影电视移步豆瓣。 友链 我们都在忍受着漫长 | Sanmmmma | 站点历史 时间 事件 03/2022 简化个人博客内容； 12/2020 站点从 Wordpress 迁移至 Hugo；使用 LoveIt 主题； 11/2020 安装 Write 主题并对主题进行适当修改；使用造字工房字体；找回一些以前的文章； 10/2020 续租虚拟主机和域名；重新定位博客风格和设计博客框架；邀请大佬加入； 04/2020 出于个人原因放弃博客更新；删除大部分文章； 01/2020 累计撰写文章30余篇； 12/2019 购买 Memory 主题； 11/2019 从阿里云购买域名yuanzhx.cn；从优网主机购买博客主机；基于Wordpress 搭建个人博客； ","date":"2022-03-20","objectID":"/about/:0:0","tags":null,"title":"关于","uri":"/about/"},{"categories":null,"content":" ASCE (美国土木工程师学会) Journal of Engineering Mechanics Journal of Geotechnical and Geoenvironmental Engineering* International Journal of Geomechanics ICE (英国土木工程师学会) Geotechnique* Geotechnique Letters Environmental Geotechnics Elsevier (爱思唯尔) International Journal of Rock Mechanics and Mining Sciences Engineering Geology Ocean Engineering Computers and Geotechnics Applied Clay Science Soils and Foundations Construction and Building Materials Cement and Concrete Research Cement and Concrete Composites Powder Technology International Journal of Impact Engineering International Journal of Solids and Structures Journal of the Mechanics and Physics of Solids* Water Research Journal of Hazardous Materials Soil Dynamics and Earthquake Engineering Springer (斯普林格) Rock Mechanics and Rock Engineering Acta Geotechnica Granular Matter Landslides Experimental Mechanics CSP (加拿大科学出版社) Canadian Geotechnical Journal* APS (美国物理学会) Physical Review Letters* AGU (美国地球物理学会) Geophysical Research Letters* ASTM (美国材料实验协会) Geotechnical Testing Journal Wiley Online Library International Journal for Numerical and Analytical Methods in Geomechanics Chinese Academy of Sciences (中国科学院) 《中国科学：技术科学》 ","date":"2022-03-20","objectID":"/journals/:0:0","tags":null,"title":"期刊","uri":"/journals/"},{"categories":["Learning"],"content":"利用Python绘制出好看的科研数据图，将自己的绘图风格存储为模板，方便以后调用。同时，Python是一款开源软件，我们再也不用担心版权的问题了!","date":"2021-01-21","objectID":"/learning-python-matplotlib/","tags":["Python","学习笔记","科研绘图"],"title":"Python-Matplotlib","uri":"/learning-python-matplotlib/"},{"categories":["Learning"],"content":"本文目标\r\r利用Python绘制出好看的科研数据图，将自己的绘图风格存储为模板，方便以后调用。同时，Python是一款开源软件，我们再也不用担心版权的问题了❤️\r\r ","date":"2021-01-21","objectID":"/learning-python-matplotlib/:0:0","tags":["Python","学习笔记","科研绘图"],"title":"Python-Matplotlib","uri":"/learning-python-matplotlib/"},{"categories":["Learning"],"content":"1. Matplotlib Matplotlib 是本文的主角，它是一款Python的开源绘图包，将其引入Python后，使用相关代码即可绘制数据图。 主页地址：Matplotlib ","date":"2021-01-21","objectID":"/learning-python-matplotlib/:1:0","tags":["Python","学习笔记","科研绘图"],"title":"Python-Matplotlib","uri":"/learning-python-matplotlib/"},{"categories":["Learning"],"content":"1.1. 安装 Windows10 系统的用户，安装Matplotlib非常简单~ 通过键盘上的 “Win”+“R”键 快速调出“运行”，在左下角。 然后，输入cmd，敲击回车Enter，会打开一个黑色的框框，在里面输入一行代码。 pip install matplotlib 等待进度条走完，你的Matplotlib包就安装好了~ ","date":"2021-01-21","objectID":"/learning-python-matplotlib/:1:1","tags":["Python","学习笔记","科研绘图"],"title":"Python-Matplotlib","uri":"/learning-python-matplotlib/"},{"categories":["Learning"],"content":"2. 快速绘图 注意：本节内容参考下面这段视频，英语好的朋友可以自行前往观看~ ","date":"2021-01-21","objectID":"/learning-python-matplotlib/:2:0","tags":["Python","学习笔记","科研绘图"],"title":"Python-Matplotlib","uri":"/learning-python-matplotlib/"},{"categories":["Learning"],"content":"2.1. 绘图包的引入 from matplotlib import pyplot as plt plt是缩写，省的每次写全名。 ","date":"2021-01-21","objectID":"/learning-python-matplotlib/:2:1","tags":["Python","学习笔记","科研绘图"],"title":"Python-Matplotlib","uri":"/learning-python-matplotlib/"},{"categories":["Learning"],"content":"2.2. 默认格式 输入下段代码，你可以得到这样一张图片： from matplotlib import pyplot as plt ages_x = [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35] dev_y = [38496, 42000, 46752, 49320, 53200, 56000, 62316, 64928, 67317, 68748, 73752] plt.plot(ages_x, dev_y, label='All Devs') py_dev_y = [45372, 48876, 53850, 57287, 63016, 65998, 70003, 70000, 71496, 75370, 83640] plt.plot(ages_x, py_dev_y, label='Python') js_dev_y = [37810, 43515, 46823, 49293, 53437, 56373, 62375, 66674, 68745, 68746, 74583] plt.plot(ages_x, js_dev_y, label='JavaScript') plt.title('Meidan Salary (USD) by Age') plt.xlabel('Ages') plt.ylabel('Median Salary (USD)') plt.legend() plt.grid(True) plt.tight_layout() plt.savefig('plot.png') plt.show() Fig.1. 默认格式\"\rFig.1. 默认格式\r 看上去还不错！简单介绍下各行代码的含义！ ages_x,dev_y,py_dev_y,js_dev_y确定变量 plt.plot(x, y, label)画线，需要x和y，还要给个标签label后面做图例 plt.title()图标题 plt.xlabel(),plt.ylabel()x轴和y轴的标签 plt.legend()绘制图例 plt.grid(True)开启内部栅格线 plt.tight_layout()紧凑布局，减小padding plt.savefig('plot.png')保存图片，同文件夹下 plt.show()给你看看图长啥样~ 下面对代码进行小小的改动，看看发生了什么？！ from matplotlib import pyplot as plt ages_x = [25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35] dev_y = [38496, 42000, 46752, 49320, 53200, 56000, 62316, 64928, 67317, 68748, 73752] py_dev_y = [45372, 48876, 53850, 57287, 63016, 65998, 70003, 70000, 71496, 75370, 83640] plt.plot(ages_x, py_dev_y, color='black', linestyle='-.', linewidth=3, marker='o', label='Python') js_dev_y = [37810, 43515, 46823, 49293, 53437, 56373, 62375, 66674, 68745, 68746, 74583] plt.plot(ages_x, js_dev_y, color='#FFC0CB', label='JavaScript') plt.plot(ages_x, dev_y, 'p--r', label='All Devs') plt.title('Meidan Salary (USD) by Age') plt.xlabel('Ages') plt.ylabel('Median Salary (USD)') plt.legend() # plt.grid(True) # plt.tight_layout() plt.savefig('plot1.png') plt.show() Fig.2. 改动格式\"\rFig.2. 改动格式\r 简单介绍下改动了什么 图例顺序发生了变化，这是因为plt.plot()顺序发生了变化 注释掉了plt.grid(True)和plt.tight_layout()，相应的也没了 线形可以写成fmt = '[marker][line][color]'的形式，例如'p--r'。但是，我不是很推荐，因为过久了可能忘记这是真的！查阅地址 通过color,linestyle,linewidth,marker也可以改线形，其中color还能用#515151这种格式 此外，Matplotlib有些很有趣的内置样式，通过print(plt.style.available)可以查看。 通过plt.style.use('fivethirtyeight')进行调用。 特殊的例子，加入plt.xkcd(),得到如图所示： Fig.3. 有趣的格式\"\rFig.3. 有趣的格式\r ","date":"2021-01-21","objectID":"/learning-python-matplotlib/:2:2","tags":["Python","学习笔记","科研绘图"],"title":"Python-Matplotlib","uri":"/learning-python-matplotlib/"},{"categories":["Learning"],"content":"2.3. 图片构造 看完上述的介绍，相信此时的你也跃跃欲试，想创造出属于自己的专属“皮肤”！😋 PS: 不玩游戏的朋友，这里的皮肤指的是样式。 恭喜大家😎，文章的后面将会介绍如何创建自己的样式。但是，在此之前，先带领大家解构一下一张科研图片，帮助大家更好地学习后面的知识，请看下图： Fig.4. 科研图片的构造\"\rFig.4. 科研图片的构造\r 毫无疑问，上面这张图片也是通过Python的Matplotlib包实现的，源码如下： import numpy as np import matplotlib.pyplot as plt from matplotlib.ticker import AutoMinorLocator, MultipleLocator np.random.seed(19680801) X = np.linspace(0.5, 3.5, 100) Y1 = 3+np.cos(X) Y2 = 1+np.cos(1+X/0.75)/2 Y3 = np.random.uniform(Y1, Y2, len(X)) fig = plt.figure(figsize=(8, 8)) fig.dpi = 200 ax = fig.add_subplot(1, 1, 1, aspect=1) def minor_tick(x, pos): if not x % 1.0: return \"\" return f\"{x:.2f}\" ax.xaxis.set_major_locator(MultipleLocator(1.000)) ax.xaxis.set_minor_locator(AutoMinorLocator(4)) ax.yaxis.set_major_locator(MultipleLocator(1.000)) ax.yaxis.set_minor_locator(AutoMinorLocator(4)) # FuncFormatter is created and used automatically ax.xaxis.set_minor_formatter(minor_tick) ax.set_xlim(0, 4) ax.set_ylim(0, 4) ax.tick_params(which='major', width=1.0) ax.tick_params(which='major', length=10) ax.tick_params(which='minor', width=1.0, labelsize=10) ax.tick_params(which='minor', length=5, labelsize=10, labelcolor='0.25') ax.grid(linestyle=\"--\", linewidth=0.5, color='.25', zorder=-10) ax.plot(X, Y1, c=(0.25, 0.25, 1.00), lw=2, label=\"Blue signal\", zorder=10) ax.plot(X, Y2, c=(1.00, 0.25, 0.25), lw=2, label=\"Red signal\") ax.plot(X, Y3, linewidth=0, marker='o', markerfacecolor='w', markeredgecolor='k') ax.set_title(\"Anatomy of a figure\", fontsize=20, verticalalignment='bottom') ax.set_xlabel(\"X axis label\") ax.set_ylabel(\"Y axis label\") ax.legend() def circle(x, y, radius=0.15): from matplotlib.patches import Circle from matplotlib.patheffects import withStroke circle = Circle((x, y), radius, clip_on=False, zorder=10, linewidth=1, edgecolor='black', facecolor=(0, 0, 0, .0125), path_effects=[withStroke(linewidth=5, foreground='w')]) ax.add_artist(circle) def text(x, y, text): ax.text(x, y, text, backgroundcolor=\"white\", ha='center', va='top', weight='bold', color='blue') # Minor tick circle(0.50, -0.10) text(0.50, -0.32, \"Minor tick label\") # Major tick circle(-0.03, 4.00) text(0.03, 3.80, \"Major tick\") # Minor tick circle(0.00, 3.50) text(0.00, 3.30, \"Minor tick\") # Major tick label circle(-0.15, 3.00) text(-0.15, 2.80, \"Major tick label\") # X Label circle(1.80, -0.27) text(1.80, -0.45, \"X axis label\") # Y Label circle(-0.27, 1.80) text(-0.27, 1.6, \"Y axis label\") # Title circle(1.60, 4.13) text(1.60, 3.93, \"Title\") # Blue plot circle(1.75, 2.80) text(1.75, 2.60, \"Line\\n(line plot)\") # Red plot circle(1.20, 0.60) text(1.20, 0.40, \"Line\\n(line plot)\") # Scatter plot circle(3.20, 1.75) text(3.20, 1.55, \"Markers\\n(scatter plot)\") # Grid circle(3.00, 3.00) text(3.00, 2.80, \"Grid\") # Legend circle(3.70, 3.80) text(3.70, 3.60, \"Legend\") # Axes circle(0.5, 0.5) text(0.5, 0.3, \"Axes\") # Figure circle(-0.3, 0.65) text(-0.3, 0.45, \"Figure\") color = 'blue' ax.annotate('Spines', xy=(4.0, 0.35), xytext=(3.3, 0.5), weight='bold', color=color, arrowprops=dict(arrowstyle='-\u003e', connectionstyle=\"arc3\", color=color)) ax.annotate('', xy=(3.15, 0.0), xytext=(3.45, 0.45), weight='bold', color=color, arrowprops=dict(arrowstyle='-\u003e', connectionstyle=\"arc3\", color=color)) ax.text(4.0, -0.4, \"Made with https://matplotlib.org\", fontsize=10, ha=\"right\", color='.5') plt.tight_layout() plt.savefig('Anatomy_of_a_figure.png') plt.show() ","date":"2021-01-21","objectID":"/learning-python-matplotlib/:2:3","tags":["Python","学习笔记","科研绘图"],"title":"Python-Matplotlib","uri":"/learning-python-matplotlib/"},{"categories":["Learning"],"content":"2.4. 期刊版面构造 当然，除了科研图片的构造外，大家也应该知晓各个期刊的版面布局。给大家提供两个著名期刊的版面构造，如下图所示： Fig.5. 期刊版面的构造\"\rFig.5. 期刊版面的构造\r ","date":"2021-01-21","objectID":"/learning-python-matplotlib/:2:4","tags":["Python","学习笔记","科研绘图"],"title":"Python-Matplotlib","uri":"/learning-python-matplotlib/"},{"categories":["Learning"],"content":"2.4. 自建样式 2.4.1. 自建样式的使用 其实，自建样式是非常之简单的！✌️ 只需要创建文件后缀名为.mplstyle的文件，并将它和绘图的.py文件放在相同的文件夹内，通过命令plt.style.use(\"./yourstylename.mplstyle\")调用就行 如果想全局调用的话也非常之简单，将.mplstyle文件放入../matplotlib/mpl-data/stylelib目录下，即可。这个目录需要你动手找找了，搜索后缀名.mplstyle也能迅速定位，这个目录下你还可以看到seaborn的系列样式，虽然我不是很喜欢😅 之后，通过命令plt.style.use(\"yourstylename\")调用就行😘 2.4.2. 自建样式的撰写 参考下述官方文档，将你想要修改的内容解除注释即可😋 #### MATPLOTLIBRC FORMAT ## NOTE FOR END USERS: DO NOT EDIT THIS FILE! ## ## This is a sample matplotlib configuration file - you can find a copy ## of it on your system in site-packages/matplotlib/mpl-data/matplotlibrc ## (which related to your Python installation location). ## ## You should find a copy of it on your system at ## site-packages/matplotlib/mpl-data/matplotlibrc (relative to your Python ## installation location). DO NOT EDIT IT! ## ## If you wish to change your default style, copy this file to one of the ## following locations ## unix/linux: ## $HOME/.config/matplotlib/matplotlibrc OR ## $XDG_CONFIG_HOME/matplotlib/matplotlibrc (if $XDG_CONFIG_HOME is set) ## other platforms: ## $HOME/.matplotlib/matplotlibrc ## and edit that copy. ## ## See https://matplotlib.org/users/customizing.html#the-matplotlibrc-file ## for more details on the paths which are checked for the configuration file. ## ## Blank lines, or lines starting with a comment symbol, are ignored, as are ## trailing comments. Other lines must have the format: ## key: val # optional comment ## ## Formatting: Use PEP8-like style (as enforced in the rest of the codebase). ## All lines start with an additional '#', so that removing all leading '#'s ## yields a valid style file. ## ## Colors: for the color values below, you can either use ## - a matplotlib color string, such as r, k, or b ## - an rgb tuple, such as (1.0, 0.5, 0.0) ## - a hex string, such as ff00ff ## - a scalar grayscale intensity such as 0.75 ## - a legal html color name, e.g., red, blue, darkslategray ## ## Matplotlib configuration are currently divided into following parts: ## - BACKENDS ## - LINES ## - PATCHES ## - HATCHES ## - BOXPLOT ## - FONT ## - TEXT ## - LaTeX ## - AXES ## - DATES ## - TICKS ## - GRIDS ## - LEGEND ## - FIGURE ## - IMAGES ## - CONTOUR PLOTS ## - ERRORBAR PLOTS ## - HISTOGRAM PLOTS ## - SCATTER PLOTS ## - AGG RENDERING ## - PATHS ## - SAVING FIGURES ## - INTERACTIVE KEYMAPS ## - ANIMATION ##### CONFIGURATION BEGINS HERE ## *************************************************************************** ## * BACKENDS * ## *************************************************************************** ## The default backend. If you omit this parameter, the first working ## backend from the following list is used: ## MacOSX Qt5Agg Gtk3Agg TkAgg WxAgg Agg ## Other choices include: ## Qt5Cairo GTK3Cairo TkCairo WxCairo Cairo ## Qt4Agg Qt4Cairo Wx # deprecated. ## PS PDF SVG Template ## You can also deploy your own backend outside of matplotlib by referring to ## the module name (which must be in the PYTHONPATH) as 'module://my_backend'. #backend: Agg ## The port to use for the web server in the WebAgg backend. #webagg.port: 8988 ## The address on which the WebAgg web server should be reachable #webagg.address: 127.0.0.1 ## If webagg.port is unavailable, a number of other random ports will ## be tried until one that is available is found. #webagg.port_retries: 50 ## When True, open the webbrowser to the plot that is shown #webagg.open_in_browser: True ## If you are running pyplot inside a GUI and your backend choice ## conflicts, we will automatically try to find a compatible one for ## you if backend_fallback is True #backend_fallback: True #interactive: False #toolbar: toolbar2 # {None, toolbar2, toolmanager} #timezone: UTC # a pytz timezone string, e.g., US/Central or Europe/Paris ## *************************************************************************** ## * LINES * ## *************************************************************************** ## See https://matplotlib.org/api/artist_api.html#module-matplotlib.lines ## f","date":"2021-01-21","objectID":"/learning-python-matplotlib/:2:5","tags":["Python","学习笔记","科研绘图"],"title":"Python-Matplotlib","uri":"/learning-python-matplotlib/"},{"categories":["Learning"],"content":"3. 样式的设置","date":"2021-01-21","objectID":"/learning-python-matplotlib/:3:0","tags":["Python","学习笔记","科研绘图"],"title":"Python-Matplotlib","uri":"/learning-python-matplotlib/"},{"categories":["Learning"],"content":"Python基础部分的自学笔记","date":"2020-12-25","objectID":"/learning-python-basic-part1/","tags":["Python","学习笔记"],"title":"Python-Basic-Part1","uri":"/learning-python-basic-part1/"},{"categories":["Learning"],"content":"绪论 ","date":"2020-12-25","objectID":"/learning-python-basic-part1/:1:0","tags":["Python","学习笔记"],"title":"Python-Basic-Part1","uri":"/learning-python-basic-part1/"},{"categories":["Learning"],"content":"Python的学习建议 多看多写，反复练习！ ","date":"2020-12-25","objectID":"/learning-python-basic-part1/:1:1","tags":["Python","学习笔记"],"title":"Python-Basic-Part1","uri":"/learning-python-basic-part1/"},{"categories":["Learning"],"content":"Python的优点 代码行特别少，代码美观； 用的人多，找教程，找论坛非常方便，各种各样的包也丰富； 在提高工作效率的工具当中，它非常简单，容易上手； ","date":"2020-12-25","objectID":"/learning-python-basic-part1/:1:2","tags":["Python","学习笔记"],"title":"Python-Basic-Part1","uri":"/learning-python-basic-part1/"},{"categories":["Learning"],"content":"安装与配置 （以Windows10系统为例） Step 1-Download: 前往官方网站，选中Python最新版本下载即可。 Step 2-Installation: 双击运行名为“python-x.x.x-amd64.exe”的执行文件，全过程选择默认选项，可安装于C盘中，记得勾选上“Install launcher for all users(recommended)”和“Add Python x.x to PATH”两个选项。 Step 3-Check: 按 Win + R 键调出运行，显示在左下角，输入cmd，在弹出的黑色输入框中输入Python，如果出现 Python 3.9.1 (tags/v3.9.1:1e5d33e, Dec 7 2020, 17:08:21) [MSC v.1927 64 bit (AMD64)] on win32 Type \"help\", \"copyright\", \"credits\" or \"license\" for more information. \u003e\u003e\u003e 恭喜，已成功安装Python。可尝试下述代码（这里\u003e\u003e\u003e可理解为Word中的输入光标…#后为注释，说明之用） \u003e\u003e\u003eprint(\"Hello World!\") # 输入这行，记得敲回车 Hello World! # 这都是显示的 \u003e\u003e\u003e # 这都是显示的 为啥第一步都是Hello World呢？\r\r长期以来，编程界都认为刚接触一门新语言时，如果首先使用它来编写一个在屏幕上显示消息“Hello World！”的程序，将给你带来好运。\r\r ","date":"2020-12-25","objectID":"/learning-python-basic-part1/:2:0","tags":["Python","学习笔记"],"title":"Python-Basic-Part1","uri":"/learning-python-basic-part1/"},{"categories":["Learning"],"content":"编辑器的选择 编辑器有不少，如VS code，Geany，Atom，Sublime等。 编辑器是用来干啥的呢？\r\r写代码的。记事本也能写代码，也能写论文，但是我们还是会用Word写论文。同理，最好选一款编辑器来写代码！\r\r 建议使用Sublime，商业软件有钱的朋友可以支持一下，没钱的朋友也不怕，提取码2333。 大多数程序都可以直接从编辑器运行，但需要解决的问题比较复杂时，你编写的程序可能需要从终端运行。 ","date":"2020-12-25","objectID":"/learning-python-basic-part1/:3:0","tags":["Python","学习笔记"],"title":"Python-Basic-Part1","uri":"/learning-python-basic-part1/"},{"categories":["Learning"],"content":"基础小知识 Python文件的后缀为.py，类似于Word的文件后缀为.docx或.doc，PPT的文件后缀为.pptx或.ppt，Matlab的文件后缀为.m，游戏的快捷方式后缀为.exe； 编辑器会以各种方式突出代码的不同部分。例如print是一个函数的名称，其颜色会与其他代码不同； 代码中的一些小的错误可以通过traceback进行修改； 啥是traceback呢？\r\rtraceback是一条记录，指出了解释器尝试运行代码时，在什么地方陷入了困境。 Traceback (most recent call last): File \"hello_world.py\", line 2, in \u003cmodule\u003e print(mesage) // 说明你这变量没定义，如果你觉得自己定义了， NameError: name 'mesage' is not defined // 说明这个地方单词写错了，也就是变量名错了 上述例子意味着两种情况：要么是使用变量前忘记了给它赋值，要么是输入变量名时拼写不正确。 \r\r 一个好的编辑器非常重要； 编辑器有啥用呢？\r\r编写程序时，编辑器的语法突出功能可帮助你快速找出某些语法错误。发现不匹配的情况。\r\r Python顺序索引是从0开始的，俗话说的好，Python从零开始上天梯~ 随着你编写的程序越来越长，有必要了解一些代码格式设置约定； Python Enhancement Proposal, PEP\r\rPEP8是最古老的PEP之一，它向Python程序员提供了代码格式设置指南。PEP8的篇幅很长，但大都与复杂的编码结构相关。 缩进；PEP8建议每级缩进都使用四个空格 行长；很多Python程序员都建议每行不超过80字符；PEP8还建议注释的行长都不超过72字符 空行；空行不会影响代码的运行，但会影响代码的可读性 \r\r 避免犯小错误，例如不正确的缩进，冒号的遗漏等问题； ","date":"2020-12-25","objectID":"/learning-python-basic-part1/:4:0","tags":["Python","学习笔记"],"title":"Python-Basic-Part1","uri":"/learning-python-basic-part1/"},{"categories":["Learning"],"content":"变量 (Variable) ","date":"2020-12-25","objectID":"/learning-python-basic-part1/:5:0","tags":["Python","学习笔记"],"title":"Python-Basic-Part1","uri":"/learning-python-basic-part1/"},{"categories":["Learning"],"content":"变量是什么 举个简单的例子来理解变量 message = \"Hello Python world!\" print(message) 运行结果和前面相同，这个message就是变量。其实，变量就是一个代号，一个名字，用来存储数据的。 ","date":"2020-12-25","objectID":"/learning-python-basic-part1/:5:1","tags":["Python","学习笔记"],"title":"Python-Basic-Part1","uri":"/learning-python-basic-part1/"},{"categories":["Learning"],"content":"变量怎么用 知道了什么是变量，下面介绍下如何正确使用变量： 变量名只包含字母、数字和下划线。变量名可以字母或下划线打头，但不可用数字打头。例如：message_1是正确的，1_message是错误的； 变量名不可包含空格，用下划线来分隔其中的单词。例如，greeting_message是正确的，greeting message是错误的； 不要用Python关键字和函数名用作变量名，例如：print就不能用于变量名； 变量名应该简短且具有描述性； 慎用小写字母l和大写字母O，因为可能被看错来。 用大写字母还是小写字母当变量名呢？\r\r就目前而言，应使用小写的Python变量名。在变量名中使用大写字母虽然不会导致错误，但避免使用大写字母是个不错的主意。PS，关键是小写大家看的懂，看着舒服，坦率地讲我看大写单词不舒服…\r\r ","date":"2020-12-25","objectID":"/learning-python-basic-part1/:5:2","tags":["Python","学习笔记"],"title":"Python-Basic-Part1","uri":"/learning-python-basic-part1/"},{"categories":["Learning"],"content":"变量有哪些 上面可以看到，message这个变量存了\"balabalabala\"一串乱七八糟的东西，这个东西称之为字符串(string format)。 字符串 (String Format) 单双引号都可以引入字符串，例如 \"Hello Python world!\" 'Hello Python world!' 这样做是为了句子中带引号，例如 'I told my friend, \"Python is my favorite language!\"' 字符串函数介绍 .title()、.upper()、.lower()函数，举例说明 \u003e\u003e\u003ename = \"aDa lovElAce nicE\" \u003e\u003e\u003eprint(name.title()) \u003e\u003e\u003eprint(name.upper()) \u003e\u003e\u003eprint(name.lower()) Ada Lovelace Nice # 输出结果 ADA LOVELACE NICE # 输出结果 ada lovelace nice # 输出结果 +命令，合并字符串，举例说明 \u003e\u003e\u003efirst_name = \"zhEngxin\" \u003e\u003e\u003elast_name = \"YUAn\" \u003e\u003e\u003efull_name = first_name.title() + \" \" + last_name.upper() \u003e\u003e\u003eprint(full_name) Zhengxin YUAN # 输出结果 \\t和\\n命令，举例说明 \u003e\u003e\u003eprint(\"\\tPython\") \u003e\u003e\u003eprint(\"\\nC\\nC++\\nJava\") Python # 输出结果 C # 输出结果 C++ # 输出结果 Java # 输出结果 .rstrip()、.lstrip()、.strip()用于删除空白，举例说明 \u003e\u003e\u003elanguage = ' python ' \u003e\u003e\u003elanguage.rstrip() ' python' \u003e\u003e\u003elanguage.lstrip() 'python ' \u003e\u003e\u003elanguage.strip() 'python' 数字 上述例子中，我们不断地输入各种句子或单词，那我们可以把Python当作计算器么？毫无疑问，是可以的。 整数计算，加减乘除，举例说明 \u003e\u003e\u003e 2 + 3 5 \u003e\u003e\u003e 3 - 2 1 \u003e\u003e\u003e 2 * 3 6 \u003e\u003e\u003e 3 / 2 1.5 乘方与运算顺序，举例说明 \u003e\u003e\u003e 3 ** 3 27 \u003e\u003e\u003e 10 ** 6 1000000 \u003e\u003e\u003e 2 + 3 * 4 14 \u003e\u003e\u003e (2 + 3) * 4 20 浮点数计算，加减乘除，举例说明 \u003e\u003e\u003e 0.1 + 0.1 0.2 \u003e\u003e\u003e 0.2 - 0.2 0.4 \u003e\u003e\u003e 2 * 0.1 0.2 \u003e\u003e\u003e 2 * 0.2 0.4 str()转型，举例说明 age = 23 message = \"Happy \" + str(age) + \"rd Birthday!\" print(message) Happy 23rd Birthday! #输出结果 注释有啥用呢？\r\r注释用井号#标识。编写注释的主要目的是阐述代码要做什么，以及是如何做的。\r\r ","date":"2020-12-25","objectID":"/learning-python-basic-part1/:5:3","tags":["Python","学习笔记"],"title":"Python-Basic-Part1","uri":"/learning-python-basic-part1/"},{"categories":["Learning"],"content":"列表 ","date":"2020-12-25","objectID":"/learning-python-basic-part1/:6:0","tags":["Python","学习笔记"],"title":"Python-Basic-Part1","uri":"/learning-python-basic-part1/"},{"categories":["Learning"],"content":"列表是什么 列表是由一系列按特定顺序排列的元素组成。综合例子 bicycles = [\"trek\",'cannondale','redline','specialized'] #单双引号均可，混用也可 print(bicycles) print(bicycles[0]) #索引从0开始 print(bicycles[1]) print(bicycles[3].title()) print(bicycles[-1]) #倒序索引 输出结果 ['trek', 'cannondale', 'redline', 'specialized'] trek cannondale Specialized specialized ","date":"2020-12-25","objectID":"/learning-python-basic-part1/:6:1","tags":["Python","学习笔记"],"title":"Python-Basic-Part1","uri":"/learning-python-basic-part1/"},{"categories":["Learning"],"content":"列表的操作 列表的修改 列表的修改，例如 motorcycles = ['honda', 'yamaha', 'suzuki'] # ['honda', 'yamaha', 'suzuki'] motorcycles[0] = 'ducati' # ['ducati', 'yamaha', 'suzuki'] 元素的添加 元素的添加，例如 motorcycles = ['honda', 'yamaha', 'suzuki'] # ['honda', 'yamaha', 'suzuki'] motorcycles.append('ducati') # ['honda', 'yamaha', 'suzuki', 'ducati'] motorcycles = ['honda', 'yamaha', 'suzuki'] # ['honda', 'yamaha', 'suzuki'] motorcycles.insert(0, 'ducati') # ['ducati', 'honda', 'yamaha', 'suzuki'] append()的好处\r\r这种创建列表的方式极其常见，因为经常要等程序运行后，你才知道用户要在程序中存储哪些数据。\r\r 元素的删除 del删除列表中的元素，例如 motorcycles = ['honda', 'yamaha', 'suzuki'] # ['honda', 'yamaha', 'suzuki'] del motorcycles[0] # ['yamaha', 'suzuki'] motorcycles = ['honda', 'yamaha', 'suzuki'] # ['honda', 'yamaha', 'suzuki'] del motorcycles[1] # ['honda', 'suzuki'] # 在这两个示例中，使用del语句将值从列表中删除后，就无法再访问它了 pop()删除元素，例如 motorcycles = ['honda', 'yamaha', 'suzuki'] # ['honda', 'yamaha', 'suzuki'] popped_motorcycle = motorcycles.pop() # ['honda', 'yamaha'] print(popped_motorcycle) # suzuki 此为弹出最后一个数据。如果想弹出任意位置，在括号内添加索引即可。例如 popped_motorcycle = motorcycles.pop(0) # ['yamaha', 'suzuki'] remove()根据值删除元素，例如 motorcycles = ['honda', 'yamaha', 'suzuki'] # ['honda', 'yamaha', 'suzuki'] motorcycles.remove('suzuki') # ['honda', 'yamaha'] 使用remove()删除元素时，也可以继续使用它的值。此外，remove()只删除第一个指定的值。 组织列表 sort()对列表永久性排序，例如 cars = ['bmw', 'audi', 'toyota', 'subaru'] # ['bmw', 'audi', 'toyota', 'subaru'] cars.sort() # ['audi', 'bmw', 'subaru', 'toyota'] cars.sort(reverse=True) # ['toyota', 'subaru', 'bmw', 'audi'] sorted()对列表临时性排序，例如 print(sorted(cars)) # ['audi', 'bmw', 'subaru', 'toyota'] print(sorted(cars), reverse=True) # ['toyota', 'subaru', 'bmw', 'audi'] reverse()反转列表元素，例如 motorcycles = ['honda', 'yamaha', 'suzuki'] # ['honda', 'yamaha', 'suzuki'] motorcycles.reverse() # ['suzuki', 'yamaha', 'honda'] 注意，这里时反转列表不是排序列表！ len()确定列表的长度，例如 len(motorcycles) # 3 遍历列表 for循环，可遍历列表，例如 magicians = ['alice', 'daivd', 'carolina'] for magician in magicians: # 这个magician可以换成别的xx都行 print(magician) # 这里magician需要配套进行变化 # alice # 当然有意义的名称帮助大些 # daivd # carolina 循环中的更多操作，例如 magicians = ['alice', 'daivd', 'carolina'] for magician in magicians: # 注意冒号问题！ print(magician) # 忘记缩进 错误！！！ print(magician) # 正确 print(magician.title() + \" is great!\") # 循环中的其他操作 创建数值列表 range()可打印一系列的数字，例如 for value in range(1,3): print(value) # 1 # 2 # 实际上不会打印数字3 list()可形成数字列表，例如 numbers = list(range(1,6)) # [1, 2, 3, 4, 5] even_number = list(range(2,11,2)) # [2, 4, 6, 8, 10] 简单例子 squares = [] for value in range(1,11): squares.append(value**2) print(squares) # [1, 4, 9, 16, 25, 36, 49, 64, 81, 100] min、max、sum简单统计 min(squares) # 1 max(squares) # 100 sum(squares) # 385 列表解析 列表解析将多行代码合并成一行，例如 squares = [value**2 for value in range(1,11)] # [1, 4, 9, 16, 25, 36, 49, 64, 81, 100] 切片 切片是提取列表的部分元素，例如 players = ['charles', 'martina', 'michael', 'florence', 'eli'] print(players[0:3]) # ['charles', 'martina', 'michael'] print(players[1:4]) # ['martina', 'michael', 'florence'] print(players[:4]) # ['charles', 'martina', 'michael', 'florence'] print(players[2:]) # ['michael', 'florence', 'eli'] print(players[-3:]) # ['michael', 'florence', 'eli'] 遍历切片，例如 for player in players[:3]: print(player.title()) 复制列表，例如 my_players = players[:] my_players = players # 这个行不通，只是取别名 ","date":"2020-12-25","objectID":"/learning-python-basic-part1/:6:2","tags":["Python","学习笔记"],"title":"Python-Basic-Part1","uri":"/learning-python-basic-part1/"},{"categories":["Learning"],"content":"元组（特殊列表） 不可变的列表被称为元组。 dimensions = (200, 50) # 元组定义 print(dimensions[0]) # 索引 200 print(dimensions[1]) # 索引 50 dimensions[0] = 250 # 报错！ 无法修改 dimensions = (250, 100) # 可整体修改 for dimension in dimensions: print(dimension) # 遍历元组中的所有值 对元组进行整体性的改动是合法的！ ","date":"2020-12-25","objectID":"/learning-python-basic-part1/:6:3","tags":["Python","学习笔记"],"title":"Python-Basic-Part1","uri":"/learning-python-basic-part1/"},{"categories":["Learning"],"content":"if语句 ","date":"2020-12-25","objectID":"/learning-python-basic-part1/:7:0","tags":["Python","学习笔记"],"title":"Python-Basic-Part1","uri":"/learning-python-basic-part1/"},{"categories":["Learning"],"content":"if语句是什么 简单理解，就是判断对错~ 示例 cars = ['audi', 'bmw', 'subaru', 'toyota'] for car in cars: if car == 'bmw': # 只有宝马大写！ print(car.upper()) else: print(car.title()) # Audi # BMW # Subaru # Toyota Python检查时，区分大小写，\u003e\u003e\u003e'Audi' == 'audi'为False。 !=用于检查不相等。\u003c为小于，\u003c=为小于等于，\u003e为大于，\u003e=为大于等于。 and与or检查多个条件age_0 \u003e= 21 and age_1 \u003e= 21或age_0 \u003e= 21 or age_1 \u003e= 21基本理解 (age_0 \u003e= 21) and (age_1 \u003e= 21)加个括号提高可读性! in的使用，1 in list(range(1,10))结果为True not in的使用同理，1 not in list(range(1,10))结果为False 布尔表达式，给变量赋值TrueorFalse，例如 game_active = True can_edit = False ","date":"2020-12-25","objectID":"/learning-python-basic-part1/:7:1","tags":["Python","学习笔记"],"title":"Python-Basic-Part1","uri":"/learning-python-basic-part1/"},{"categories":["Learning"],"content":"if语句 if conditional_test: # 一定记得写冒号哦！ do something # 记得缩进！ ","date":"2020-12-25","objectID":"/learning-python-basic-part1/:7:2","tags":["Python","学习笔记"],"title":"Python-Basic-Part1","uri":"/learning-python-basic-part1/"},{"categories":["Learning"],"content":"if-else语句 if conditional_test: # 一定记得写冒号哦！ do something # 记得缩进！ else: do something # 也记得加冒号！ ","date":"2020-12-25","objectID":"/learning-python-basic-part1/:7:3","tags":["Python","学习笔记"],"title":"Python-Basic-Part1","uri":"/learning-python-basic-part1/"},{"categories":["Learning"],"content":"if-elif-else结构 if conditional_test1: # 一定记得写冒号哦！ do something # 记得缩进！ elif conditional_test2: do something # 也记得加冒号！ elif conditional_test3: do something # 更多 else: do something # 自己根据需要精简代码哦~ 特别注意: 这个else:不写其实也行，但是建议还是写出来，因为有时候很有帮助~ 特殊例子 name_cars = [] if name_cars: # 只要列表不为空，这个地方就是True do something else: do something 如何使Python代码好看？\r\r在诸如==、\u003e=和\u003c=等比较运算符两边各添加一个空格，例如，if age \u003c 4:要比if age\u003c4:好！ 这样的空格不会影响Python对代码的解读，而只是让代码阅读起来更容易。\r\r ","date":"2020-12-25","objectID":"/learning-python-basic-part1/:7:4","tags":["Python","学习笔记"],"title":"Python-Basic-Part1","uri":"/learning-python-basic-part1/"},{"categories":["Learning"],"content":"测试多个条件 如下例所示，为测试多个条件 requested_toppings = ['mushrooms', 'extra cheese'] if 'mushrooms' in requested_toppings: print(\"Adding mushrooms.\") if 'pepperoni' in requested_toppings: print(\"Adding pepperoni.\") if 'extra cheese' in requested_toppings: print(\"Adding extra cheese.\") print(\"\\nFinished making your pizza!\") 得到结果 Adding mushrooms. Adding extra cheese. Finished making your pizza! 将上述代码转变为if-elif-else结构，如下 requested_toppings = ['mushrooms', 'extra cheese'] if 'mushrooms' in requested_toppings: print(\"Adding mushrooms.\") elif 'pepperoni' in requested_toppings: print(\"Adding pepperoni.\") elif 'extra cheese' in requested_toppings: print(\"Adding extra cheese.\") print(\"\\nFinished making your pizza!\") 第一个测试检查时，就通过了，跳过了余下的部分，直至最后，显示如下 Adding mushrooms. Finished making your pizza! ","date":"2020-12-25","objectID":"/learning-python-basic-part1/:7:5","tags":["Python","学习笔记"],"title":"Python-Basic-Part1","uri":"/learning-python-basic-part1/"},{"categories":["Learning"],"content":"if语句处理列表 典型示例 available_toppings = ['mushrooms', 'olives', 'green peppers', 'pepperoni', 'pineapple', 'extra cheese'] requested_toppings = ['mushrooms', 'french fries', 'extra cheese'] for requested_topping in requested_toppings: if requested_topping in available_toppings: print(\"Adding \" + requested_topping + \".\") else: print(\"Sorry, we don't have \" + requested_topping + \".\") print(\"\\nFinished making your pizza!\") 得到结果 Adding mushrooms. Sorry, we don't have french fries. Adding extra cheese. Finished making your pizza! ","date":"2020-12-25","objectID":"/learning-python-basic-part1/:7:6","tags":["Python","学习笔记"],"title":"Python-Basic-Part1","uri":"/learning-python-basic-part1/"},{"categories":["Learning"],"content":"字典 ","date":"2020-12-25","objectID":"/learning-python-basic-part1/:8:0","tags":["Python","学习笔记"],"title":"Python-Basic-Part1","uri":"/learning-python-basic-part1/"},{"categories":["Learning"],"content":"字典是什么 来看一个游戏，其中包含一些外星人，这些外星人的颜色和点数各不相同。下面是一个简单的字典，存储了有关特定外星人的信息： alien_0 = {'color': 'green', 'points': 5} print(alien_0['color']) #green print(alien_0['points']) #5 在Python中，字典是一系列键-值对。每个键都与一个值相关联，你可以使用键来访问与之相关联的值。与键相关联的值可以是数字、字符串、列表乃至字典。事实上，可将任何Python对象用作字典中的值。 ","date":"2020-12-25","objectID":"/learning-python-basic-part1/:8:1","tags":["Python","学习笔记"],"title":"Python-Basic-Part1","uri":"/learning-python-basic-part1/"},{"categories":["Learning"],"content":"字典怎么用 创建一个空字典 alien_0 = {} 添加键-值对 alien_0['x_position'] = 0 alien_0['y_position'] = 25 print(alien_0) #{'y_position': 25, 'x_position': 0} 访问值 print(alien_0['x_position']) #0 ##访问值的方法 修改字典中的值 alien_0['x_position'] = 100 删除键-值对 del alien_0['x_position'] ##删除键 print(alien_0) #{'y_position': 25} ","date":"2020-12-25","objectID":"/learning-python-basic-part1/:8:2","tags":["Python","学习笔记"],"title":"Python-Basic-Part1","uri":"/learning-python-basic-part1/"},{"categories":["Learning"],"content":"遍历字典 遍历所有的键-值对 下面的字典存储一名用户的用户名、名和姓： user_0 = { 'username': 'efermi', 'first': 'enrico', 'last': 'fermi', } 可以使用一个for循环来遍历这个字典： for key, value in user_0.items(): print(\"\\nKey: \" + key) print(\"Value: \" + value) 下面的代码使用了简单的变量名，这完全可行： for k, v in user_0.items() 结果为 Key: last Value: fermi Key: first Value: enrico Key: username Value: efermi 注意，即便遍历字典时，键-值对的返回顺序也与存储顺序不同。Python不关心键-值对的存储顺序，而只跟踪键和值之间的关联关系。 遍历字典中的所有键 方法keys()很有用，下面来遍历字典favorite_languages，并将每个被调查者的名字都打印出来： favorite_languages = { 'jen': 'python', 'sarah': 'c', 'edward': 'ruby', 'phil': 'python', } for name in favorite_languages.keys(): print(name.title()) 遍历字典时，会默认遍历所有的键，因此，如果将上述代码中的for name in favorite_languages.keys():替换为for name in favorite_languages:，输出将不变。 方法keys()并非只能用于遍历，实际上，它返回一个列表，其中包含字典中的所有键。 按顺序遍历字典中的所有键 使用函数sorted()来获得按特定顺序排列的键列表的副本： for name in sorted(favorite_languages.keys()): print(name.title() + \", thank you for taking the poll.\") 这里类似于我先拿到键，然后进行排序。 遍历字典中的所有值 使用方法values()，它返回一个值列表，而不包含任何键。 例如：for language in favorite_languages.values(): 为剔除重复项，可使用集合set 例如：for language in set(favorite_languages.values()): 其实这里类似于重新生成了一个集合，或者列表，然后通过for进行遍历调用。 随着你更深入地学习Python，经常会发现它内置的功能可帮助你以希望的方式处理数据。 ","date":"2020-12-25","objectID":"/learning-python-basic-part1/:8:3","tags":["Python","学习笔记"],"title":"Python-Basic-Part1","uri":"/learning-python-basic-part1/"},{"categories":["Learning"],"content":"嵌套 有时候，需要将一系列字典存储在列表中，或将列表作为值存储在字典中，这称为嵌套。 字典列表 下面的代码创建一个包含三个外 星人的列表： alien_0 = {'color': 'green', 'points': 5} alien_1 = {'color': 'yellow', 'points': 10} alien_2 = {'color': 'red', 'points': 15} aliens = [alien_0, alien_1, alien_2] for alien in aliens: print(alien) # Results #{'color': 'green', 'points': 5} #{'color': 'yellow', 'points': 10} #{'color': 'red', 'points': 15} 在这个列表中，所有字典的结构都相同，因此你可以遍历这个列表，并以相同的方式处理其中的每个字典。 在字典中存储列表 在本章前面有关喜欢的编程语言的示例中，如果将每个人的回答都存储在一个列表中，被调查者就可选择多种喜欢的语言。在这种情况下，当我们遍历字典时，与每个被调查者相关联的都是一个语言列表，而不是一种语言。 favorite_languages = { 'jen': ['python', 'ruby'], 'sarah': ['c'], 'edward': ['ruby', 'go'], 'phil': ['python', 'haskell'], } for name, languages in favorite_languages.items(): print(\"\\n\" + name.title() + \"'s favorite languages are:\") for language in languages: print(\"\\t\" + language.title()) #Jen's favorite languages are: # Python # Ruby #Sarah's favorite languages are: # C #Phil's favorite languages are: # Python # Haskell #Edward's favorite languages are: # Ruby # Go 注意: 列表和字典的嵌套层级不应太多。如果嵌套层级比前面的示例多得多，很可能有更简单的解决问题的方案。 在字典中存储字典 可在字典中嵌套字典，但这样做时，代码可能很快复杂起来。 users = { 'aeinstein': { 'first': 'albert', 'last': 'einstein', 'location': 'princeton', }, 'mcurie': { 'first': 'marie', 'last': 'curie', 'location': 'paris', }, } for username, user_info in users.items(): print(\"\\nUsername: \" + username) full_name = user_info['first'] + \" \" + user_info['last'] location = user_info['location'] print(\"\\tFull name: \" + full_name.title()) print(\"\\tLocation: \" + location.title()) 请注意，表示每位用户的字典的结构都相同，虽然Python并没有这样的要求，但这使得嵌套的字典处理起来更容易。倘若表示每位用户的字典都包含不同的键，for循环内部的代码将更复杂。 （Part1部分到此结束） ","date":"2020-12-25","objectID":"/learning-python-basic-part1/:8:4","tags":["Python","学习笔记"],"title":"Python-Basic-Part1","uri":"/learning-python-basic-part1/"},{"categories":["Science"],"content":"通过文献管理软件EndNoteX9，实现中英文参考文献混排效果，帮助你轻松完成学位论文，毕业撒花！","date":"2020-03-20","objectID":"/science-endnote/","tags":["EndNote","参考文献","中英文混排"],"title":"EndNote中英文参考文献混排","uri":"/science-endnote/"},{"categories":["Science"],"content":"摘要\r\r通过文献管理软件EndNoteX9，实现中英文参考文献混排效果，帮助你轻松完成学位论文，毕业撒花！\r\r 作者\r\r文章作者：阿杰（ shanjunjie19@163.com ） 技术指导：南神（ nan_bo_wen@163.com ） \r\r ","date":"2020-03-20","objectID":"/science-endnote/:0:0","tags":["EndNote","参考文献","中英文混排"],"title":"EndNote中英文参考文献混排","uri":"/science-endnote/"},{"categories":["Science"],"content":"0. 前言 EndNote是一款由SCI官方开发的文献管理软件，具有强大的参考文献管理功能，支持众多国际期刊的文献格式，涵盖各个研究领域。 由于EndNote研发团队只关心英文文献的适配问题，使用EndNote来管理中文文献确实并非明智之举，其常会出现乱码、兼容性差等问题。 但是，在撰写硕士、博士学位论文时，参考文献的中英文混排是不可避免的，这点总是让同学们感到非常苦恼。 阅读完本篇文章，妈妈再也不用担心我的参考文献中英文混排了，吃嘛嘛香，一口气上五楼不喘气！ ","date":"2020-03-20","objectID":"/science-endnote/:1:0","tags":["EndNote","参考文献","中英文混排"],"title":"EndNote中英文参考文献混排","uri":"/science-endnote/"},{"categories":["Science"],"content":"1. 建立中文文献类型 ","date":"2020-03-20","objectID":"/science-endnote/:2:0","tags":["EndNote","参考文献","中英文混排"],"title":"EndNote中英文参考文献混排","uri":"/science-endnote/"},{"categories":["Science"],"content":"步骤1 首先，进入 Endnote X9，在 Endnote 工具栏中选择【Edit】→【Preference ⋯】→【Reference Types】，在这里点开。 然后，在 Journal Article 下拉菜单里面，选择一个新的文献类型，并对其进行设置。新文献类型比如 “Unused1、2或者3” 都可，这里选择 Unused2 示范。 Fig. 1. 建立文献类型\"\rFig. 1. 建立文献类型\r ","date":"2020-03-20","objectID":"/science-endnote/:2:1","tags":["EndNote","参考文献","中英文混排"],"title":"EndNote中英文参考文献混排","uri":"/science-endnote/"},{"categories":["Science"],"content":"步骤2 随后，点击【Modify Reference Types】进行新格式设置，设置内容如下图所示，完成后点击确定。 Fig. 2. 取名中文文献类型\"\rFig. 2. 取名中文文献类型\r ","date":"2020-03-20","objectID":"/science-endnote/:2:2","tags":["EndNote","参考文献","中英文混排"],"title":"EndNote中英文参考文献混排","uri":"/science-endnote/"},{"categories":["Science"],"content":"2. 转换文献类型 ","date":"2020-03-20","objectID":"/science-endnote/:3:0","tags":["EndNote","参考文献","中英文混排"],"title":"EndNote中英文参考文献混排","uri":"/science-endnote/"},{"categories":["Science"],"content":"步骤3 将 Endnote 文献库中，所有的中文文献的文献类型（Reference Type）都转换为刚刚定义的 Chinese Journal 类型，并且把 Author 中的内容复制到 Secondary Author 中，如下图所示。 Fig. 3. 转换文献类型\"\rFig. 3. 转换文献类型\r ","date":"2020-03-20","objectID":"/science-endnote/:3:1","tags":["EndNote","参考文献","中英文混排"],"title":"EndNote中英文参考文献混排","uri":"/science-endnote/"},{"categories":["Science"],"content":"3. 新建输出格式 ","date":"2020-03-20","objectID":"/science-endnote/:4:0","tags":["EndNote","参考文献","中英文混排"],"title":"EndNote中英文参考文献混排","uri":"/science-endnote/"},{"categories":["Science"],"content":"步骤4\u00265 通过工具栏上的【Edit】→【Output Styles】→【New Style ⋯】进行新输入格式的设置，需要设置的位置如图所示（画红框的地方）。 在 About this Style 栏中【Category:】填 “Generic”，Anonymous Works、Page Numbers、Journal Names、Section 可以不变。 Fig. 4\u00265. 类型描述\"\rFig. 4\u00265. 类型描述\r ","date":"2020-03-20","objectID":"/science-endnote/:4:1","tags":["EndNote","参考文献","中英文混排"],"title":"EndNote中英文参考文献混排","uri":"/science-endnote/"},{"categories":["Science"],"content":"步骤6 对于中文期刊，引文在正文中的显示格式大都采用数字上标编号标注，Citations 的设置如下：Templates 输入框在 Insert Field 中选择 “Bibliography Number” 进行设置，前后加上中括号，设置为上标格式，最后如图显示。这样在正文中引用文献时则表示为文献出现的顺序号，格式为上标。Citations 的其余部分可以不变。 Fig. 6. 建立模板\"\rFig. 6. 建立模板\r ","date":"2020-03-20","objectID":"/science-endnote/:4:2","tags":["EndNote","参考文献","中英文混排"],"title":"EndNote中英文参考文献混排","uri":"/science-endnote/"},{"categories":["Science"],"content":"步骤7 中文期刊的参考文献格式可自行查阅 规范 获得。 在 Reference Types 中选上 Journal Article 代表英文文献，通过 Insert Field 工具按钮将英文文献格式设置为：（输入的时候注意用英文输入法和注意哪有空格） （制表符）Author. Title [J]. Journal, Year|, Volume|(Issue): Pages. 接着在 Reference Types 中选择 Chinese Journal 代表中文文献，点击 Insert Field 选择字段将中文文献格式设置成： （制表符）Secondary Author. Title[J]. Journal, Year|, Volume|(Issue)|: Pages. 接着在 Reference Types 中选择 Conference Paper 代表会议文献，点击 Insert Field 选择字段将会议论文格式设置成： （制表符）Author. Title[A]. Editor.Conference Name[C].Conference Location:Publisher,Year|:Pages. 接着在 Reference Types 中选择 Thesis 代表中文文献，点击 Insert Field 选择字段将学位论文格式设置成： （制表符）Author. Title[D]. University, Year|. 接着在 Reference Types 中选择 Book 代表中文文献，点击 Insert Field 选择字段将专著格式设置成： （制表符）Author. Title[M].Year. 如图所示。其中，制表符在右上角插入。 Fig. 7. 示例\"\rFig. 7. 示例\r ","date":"2020-03-20","objectID":"/science-endnote/:4:3","tags":["EndNote","参考文献","中英文混排"],"title":"EndNote中英文参考文献混排","uri":"/science-endnote/"},{"categories":["Science"],"content":"步骤8 英文作者设置，Author Lists 的设置代表英文文献格式，作者前后之间用“,”分隔，显示前 3 位作者，超过 3 个作者缩略为 “, et al. ”。如图所示。 Fig. 8. 英文作者设置\"\rFig. 8. 英文作者设置\r ","date":"2020-03-20","objectID":"/science-endnote/:4:4","tags":["EndNote","参考文献","中英文混排"],"title":"EndNote中英文参考文献混排","uri":"/science-endnote/"},{"categories":["Science"],"content":"步骤9 Editor Lists 的设置代表中文文献格式，作者前后之间用 “,” 分隔，显示前 3 位作者，超过3个作者缩略为 “, 等.” ，如图所示。 Fig. 9. 中文作者显示设置\"\rFig. 9. 中文作者显示设置\r ","date":"2020-03-20","objectID":"/science-endnote/:4:5","tags":["EndNote","参考文献","中英文混排"],"title":"EndNote中英文参考文献混排","uri":"/science-endnote/"},{"categories":["Science"],"content":"步骤10 最终参考文献序号和悬挂的设置， Layout 中的 Start each reference with 部分在 Insert Field 工具按钮中选择 “Bibliography Number” （与第五步的设置类似，只是不需要变成上标），前后加上中括号使参考文献按顺序编号格式如 [1]，最后显示为 [Bibliography Number] ，悬挂缩进 Hanging Indent 设为 All paragraphs 。 至此，中文期刊文献输出格式建立完成，最后使用【File】 →【Save As】保存该格式并命名，保存的文件名为 [中文文献输出格式] ，如图所示。 Fig. 10. 参考文献布局设置\"\rFig. 10. 参考文献布局设置\r ","date":"2020-03-20","objectID":"/science-endnote/:4:6","tags":["EndNote","参考文献","中英文混排"],"title":"EndNote中英文参考文献混排","uri":"/science-endnote/"},{"categories":["Science"],"content":"4. Word 中的设置 ","date":"2020-03-20","objectID":"/science-endnote/:5:0","tags":["EndNote","参考文献","中英文混排"],"title":"EndNote中英文参考文献混排","uri":"/science-endnote/"},{"categories":["Science"],"content":"步骤11 首先选择输出格式 Style 为 [中文文献输出格式] 。 设置悬挂，点击 word 中的 Bibliography 的下拉菜单，悬挂值一般设置 0.635cm，如图所示。 Fig. 11. Word 中的设置\"\rFig. 11. Word 中的设置\r 好了，现在你可以在 Word 中实现中英文参考文献混排了！祝你写作愉快，毕业快乐~ ","date":"2020-03-20","objectID":"/science-endnote/:5:1","tags":["EndNote","参考文献","中英文混排"],"title":"EndNote中英文参考文献混排","uri":"/science-endnote/"},{"categories":["Science"],"content":"土体的颗粒大小和颗粒级配在土木工程中，特别是在岩土工程中，扮演着重要的地位。","date":"2019-12-20","objectID":"/science-sieve/","tags":["筛分法","ASTM"],"title":"土工筛分法相关参考规范","uri":"/science-sieve/"},{"categories":["Science"],"content":"摘要\r\r土体的颗粒大小和颗粒级配在土木工程中，特别是在岩土工程中，扮演着重要的地位。筛分法是最传统也是最普遍使用的用来测定粒径分布的方法。本文总结了一些相关的实验规范供大家参考。\r\r ","date":"2019-12-20","objectID":"/science-sieve/:0:0","tags":["筛分法","ASTM"],"title":"土工筛分法相关参考规范","uri":"/science-sieve/"},{"categories":["Science"],"content":"1. 中国标准 国内现行的标准为：GB/T6003.1-2012 目数和微米对照表： Fig. 1. 中国通常使用的筛网目数与粒径对照表\"\rFig. 1. 中国通常使用的筛网目数与粒径对照表\r ","date":"2019-12-20","objectID":"/science-sieve/:1:0","tags":["筛分法","ASTM"],"title":"土工筛分法相关参考规范","uri":"/science-sieve/"},{"categories":["Science"],"content":"2. 美国标准 ASTM 的相关标准实验规范： ASTM D2487：土的分类标准介绍； ASTM C136：粗细集料细筛的标准测试方法； ASTM D422-63：颗粒分析试验标准方法； ASTM E11-2013：金属丝筛网及试验筛标准规范； Fig. 2. 美国通常使用的筛网目数与粒径对照表\"\rFig. 2. 美国通常使用的筛网目数与粒径对照表\r ","date":"2019-12-20","objectID":"/science-sieve/:2:0","tags":["筛分法","ASTM"],"title":"土工筛分法相关参考规范","uri":"/science-sieve/"},{"categories":["Science"],"content":"3. 总结 经过仔细地分析与考虑，基于以下两点原因： 保证数据点间距相同 尽可能多地获得数据点 选择方孔筛，且粒径分别为： 2 mm; 1.25 mm; 0.8 mm; 0.6 mm; 0.45 mm; 0.3 mm; 0.2 mm; 0.15 mm; 0.105 mm; 0.076 mm. ","date":"2019-12-20","objectID":"/science-sieve/:3:0","tags":["筛分法","ASTM"],"title":"土工筛分法相关参考规范","uri":"/science-sieve/"},{"categories":["Science"],"content":"LaTeX安装","date":"2019-12-15","objectID":"/science-latex/","tags":["LaTeX"],"title":"LaTeX安装","uri":"/science-latex/"},{"categories":["Science"],"content":"摘要\r\rLaTeX安装\r\r ","date":"2019-12-15","objectID":"/science-latex/:0:0","tags":["LaTeX"],"title":"LaTeX安装","uri":"/science-latex/"},{"categories":["Science"],"content":"0. 前言 LaTeX（音译“拉泰赫”）是一种基于 ΤΕΧ 的排版系统，由美国计算机学家莱斯利·兰伯特 （Leslie Lamport） 在20世纪80年代初期开发，利用这种格式，即使使用者没有排版和程序设计的知识也可以充分发挥由 TeX 所提供的强大功能，能在几天，甚至几小时内生成很多具有书籍质量的印刷品。对于生成复杂表格和数学公式，这一点表现得尤为突出。因此它非常适用于生成高印刷质量的科技和数学类文档。这个系统同样适用于生成从简单的信件到完整书籍的所有其他种类的文档。（参考资料：百度百科） ","date":"2019-12-15","objectID":"/science-latex/:1:0","tags":["LaTeX"],"title":"LaTeX安装","uri":"/science-latex/"},{"categories":["Science"],"content":"1. TeX Live 安装 TeX Live 是由国际 TeX 用户组织 TUG 开发的 TeX 系统，它是运行 LaTeX 代码所必须的环境，支持不同的操作系统平台。其 Windows 版本又称 fpTeX，Unix/Linux 版本即著名的 teTeX（参考资料：CTeX）。 ","date":"2019-12-15","objectID":"/science-latex/:2:0","tags":["LaTeX"],"title":"LaTeX安装","uri":"/science-latex/"},{"categories":["Science"],"content":"步骤一：推荐先安装 TeX Live 2019 下载链接：TeX Live 2019。按照下图步骤，下载相应版本： Fig. 1. TeX Live 2019 下载 A\"\rFig. 1. TeX Live 2019 下载 A\r Fig. 2. TeX Live 2019 下载 B\"\rFig. 2. TeX Live 2019 下载 B\r 下载完成后正常安装，选择自己喜欢的安装路径，安装过程如图所示： Fig. 3. TeX Live 安装中\"\rFig. 3. TeX Live 安装中\r 安装完成后会正常提示，也可以用 cmd 检查电脑是否成功安装 LaTeX 环境。 ","date":"2019-12-15","objectID":"/science-latex/:2:1","tags":["LaTeX"],"title":"LaTeX安装","uri":"/science-latex/"},{"categories":["Science"],"content":"步骤二：配置镜像源 打开 Tex Live Manager，如图所示配置源： Fig. 4. 配置镜像源\"\rFig. 4. 配置镜像源\r 推荐使用重大版本。至此，TeX Live 的安装就结束了。以上内容参考资料：简书ACC839303568 ","date":"2019-12-15","objectID":"/science-latex/:2:2","tags":["LaTeX"],"title":"LaTeX安装","uri":"/science-latex/"},{"categories":["Science"],"content":"2. TeXstudio 编译器 TeXstudio 是一款编译器，也就是方便你敲代码的软件，集成一些代码。 ","date":"2019-12-15","objectID":"/science-latex/:3:0","tags":["LaTeX"],"title":"LaTeX安装","uri":"/science-latex/"},{"categories":["Science"],"content":"步骤三：推荐安装编译器 TeXstudio 下载链接：TeXstudio 按照下图步骤，下载相应版本： Fig. 5. TeXstudio 下载\"\rFig. 5. TeXstudio 下载\r ","date":"2019-12-15","objectID":"/science-latex/:3:1","tags":["LaTeX"],"title":"LaTeX安装","uri":"/science-latex/"},{"categories":["Science"],"content":"步骤四：配置编译器 TeXstudio 进行如下配置，使用 XeTeX 进行编译 Fig. 6. 配置编译器 TeXstudio\"\rFig. 6. 配置编译器 TeXstudio\r 至此，在你的电脑上已经可以使用 LaTeX 对论文进行排版了。关于后续深入地学习，需要读者自行查阅资料。 ","date":"2019-12-15","objectID":"/science-latex/:3:2","tags":["LaTeX"],"title":"LaTeX安装","uri":"/science-latex/"},{"categories":["Science"],"content":"3. 参考资料 Latex: TexStudio的使用 LaTeX使用介绍——基于Tex Live2018 Elsevier 期刊 Latex 投稿模板 ","date":"2019-12-15","objectID":"/science-latex/:4:0","tags":["LaTeX"],"title":"LaTeX安装","uri":"/science-latex/"},{"categories":["Science"],"content":"4. 推荐模版 硕士论文模版：清华大学; 中国科学技术大学; 重庆大学。 ","date":"2019-12-15","objectID":"/science-latex/:5:0","tags":["LaTeX"],"title":"LaTeX安装","uri":"/science-latex/"},{"categories":["Science"],"content":"5. 推荐书籍 LaTeX入门_刘海洋 ","date":"2019-12-15","objectID":"/science-latex/:6:0","tags":["LaTeX"],"title":"LaTeX安装","uri":"/science-latex/"},{"categories":["Science"],"content":"简单介绍扫描电镜及其实验基本知识，部分内容源于作者自身经验，非规定或实验标准，仅作学习交流用。","date":"2019-12-01","objectID":"/science-sem/","tags":["扫描电镜","SEM"],"title":"扫描电镜简介","uri":"/science-sem/"},{"categories":["Science"],"content":"摘要\r\r简单介绍扫描电镜及其实验基本知识，部分内容源于作者自身经验，非规定或实验标准，仅作学习交流用。\r\r ","date":"2019-12-01","objectID":"/science-sem/:0:0","tags":["扫描电镜","SEM"],"title":"扫描电镜简介","uri":"/science-sem/"},{"categories":["Science"],"content":"1. 简介 扫描电子显微镜，英文名为 Scanning Electron Microscope（SEM），是1965年发明的较现代的细胞生物学研究工具，主要是利用二次电子信号成像来观察样品的表面形态，即用极狭窄的电子束去扫描样品，通过电子束与样品的相互作用产生各种效应，其中主要是样品的二次电子发射。访问百度百科获取更多相关知识。 ","date":"2019-12-01","objectID":"/science-sem/:1:0","tags":["扫描电镜","SEM"],"title":"扫描电镜简介","uri":"/science-sem/"},{"categories":["Science"],"content":"2. 仪器设备 本文所述内容均基于 Zeiss Auriga 聚焦离子束场发射扫描双束电镜，该设备位于重庆大学 A区综合实验大楼103对面。 Fig. 1. Zeiss Auriga 聚焦离子束场发射扫描双束电镜\"\rFig. 1. Zeiss Auriga 聚焦离子束场发射扫描双束电镜\r ","date":"2019-12-01","objectID":"/science-sem/:2:0","tags":["扫描电镜","SEM"],"title":"扫描电镜简介","uri":"/science-sem/"},{"categories":["Science"],"content":"2.1. 技术指标 SEM 分辨率 1.0nm@15kV 1.9nm@1kV 放大倍数 Mag：12~1000,000x 加速电压 EHT：0.1~30kV ","date":"2019-12-01","objectID":"/science-sem/:2:1","tags":["扫描电镜","SEM"],"title":"扫描电镜简介","uri":"/science-sem/"},{"categories":["Science"],"content":"2.2. 主要功能 场发射扫描电镜（SEM） 3D背散射电子取向成像系统（EBSD） 聚焦离子束系统（FIB） ","date":"2019-12-01","objectID":"/science-sem/:2:2","tags":["扫描电镜","SEM"],"title":"扫描电镜简介","uri":"/science-sem/"},{"categories":["Science"],"content":"2.3. 相关连接 重庆大学电镜中心：Zeiss Auriga 聚焦离子束场发射扫描双束电镜 重庆大学预约系统：电镜预约 ","date":"2019-12-01","objectID":"/science-sem/:2:3","tags":["扫描电镜","SEM"],"title":"扫描电镜简介","uri":"/science-sem/"},{"categories":["Science"],"content":"3. 样品制作 ","date":"2019-12-01","objectID":"/science-sem/:3:0","tags":["扫描电镜","SEM"],"title":"扫描电镜简介","uri":"/science-sem/"},{"categories":["Science"],"content":"3.1. 注意事项 下图为样品台和样品盒。确保下述注意事项，可获得较好的电镜图片： 样品需完全烘干，去除所有挥发物（水，酒精，油等） 完全不包含磁性 样品需要和导电胶粘牢，样品高度不得过大（\u003c2 cm） 粉末状样品在制样后需处理易脱落的细小颗粒 确保样品表面平整 多孔样品在入舱前请提前告知操作员 Fig. 2. 样品台和样品盒\"\rFig. 2. 样品台和样品盒\r ","date":"2019-12-01","objectID":"/science-sem/:3:1","tags":["扫描电镜","SEM"],"title":"扫描电镜简介","uri":"/science-sem/"},{"categories":["Science"],"content":"3.2. 喷金 因为扫描电镜是通过电子信号来进行成像，所以导电性越好的样品，越容易拍出清晰的照片。导电性不好或不导电样品，其需要进行喷金处理。这里给出一些样品的常用喷金参数： 钙质砂/硅砂———20s/6次 MICP处理后的砂土———20s/6次 玻璃珠/玻璃渣———30s/6次 ","date":"2019-12-01","objectID":"/science-sem/:3:2","tags":["扫描电镜","SEM"],"title":"扫描电镜简介","uri":"/science-sem/"},{"categories":["Science"],"content":"3.3. 设备参数 该部分是由操作员进行调整，这里给出作者常用的参数： 电压：5kV扫描；20kV能谱 光栅：30或者60均可，30效果较好 亮度：49.5% 对比度：25~28% ","date":"2019-12-01","objectID":"/science-sem/:3:3","tags":["扫描电镜","SEM"],"title":"扫描电镜简介","uri":"/science-sem/"},{"categories":["Science"],"content":"4. 数据展示 ","date":"2019-12-01","objectID":"/science-sem/:4:0","tags":["扫描电镜","SEM"],"title":"扫描电镜简介","uri":"/science-sem/"},{"categories":["Science"],"content":"4.1. 扫描图片 展示拍摄的SEM图片。 Fig. 3. CaCO3图片\"\rFig. 3. CaCO3图片\r","date":"2019-12-01","objectID":"/science-sem/:4:1","tags":["扫描电镜","SEM"],"title":"扫描电镜简介","uri":"/science-sem/"},{"categories":null,"content":"学术网 文献检索与下载 Sci-Hub | 知网 | Web of Science | Google Scholar | 百度学术 | Scopus 期刊与学者 LetPub(查询期刊信息) | EndNote Output Styles(期刊的参考文献排版样式) | 全球学者库(所有领域、全球学术人都能搜到) | ResearchGate(科研社交) 论文写作 American Journal Experts(专业的论文润色网站) | Oxford Learner’s Dictionaries(高级的字典) | Linggle(搭配查询网站) 学术资源 维基wikipedia | Library Genesis(英文书免费下载) ","date":"2019-10-02","objectID":"/resources/:0:1","tags":null,"title":"资源","uri":"/resources/"},{"categories":null,"content":"优秀网站 图片 | Bejson(在线图片压缩工具) | Pixabay(免费的高清图片和矢量文件资源库) | 花瓣网(图片素材领导者) | Convertio(文件转换器，可以转图片和PDF文件) | iconfont(阿里巴巴图标素材库) | 改图宝(在线修改图片尺寸，加水印，换背景色，修改分辨率等等) | 颜色工具(颜色码对照表+RGB颜色值转换) | Color Hunt(各种搭配好的颜色，供你选择) 视频 | OBS(开源录屏软件) | CR TubeGet(全网视频下载工具，有免费版) | doyoudo(数码类软件教程网站) | 文档 | Overleaf(LaTeX在线编辑网站，包含简历和论文模板) | iLovepdf(PDF爱好者的在线工具) | Cmd Markdown(Markdown在线编辑器) | 造字工房(专注于汉字新字体字形设计与开发) | 鸠摩搜索(电子书搜索引擎) | WPS文档(内地云办公) Code | MSDN(技术资源库，包含系统) | ATOM(21世纪的可编程文本编辑器) | 优网主机(WordPress博客虚拟主机) | W3school(网站建设教程) ","date":"2019-10-02","objectID":"/resources/:0:2","tags":null,"title":"资源","uri":"/resources/"},{"categories":null,"content":"教程 Origin中文教程 白东升版，65集 Photoshop教程 PS联盟 Matlab教程 我要自学网 Endnote教程 EndnoteX7使用教程 By 蕾哥 | EndNote 中英文参考文献混排 | 文献管理与信息分析 SketchUp教程 SketchUp2015入门基础教程 | SketchUp吧 3DS Max教程 碎片插件打造破碎物体 OBS教程 六分钟学会直播与视频录制 HTML+CSS教程 doyoudo 出品 | pink 老师 | 为初学者准备的：HTML 速成 | 为初学者准备的：CSS 速成 ","date":"2019-10-02","objectID":"/resources/:0:3","tags":null,"title":"资源","uri":"/resources/"}]